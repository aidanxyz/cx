source items_item
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = aidanmysql
    sql_db              = cx
    sql_port            = 

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \ SELECT id, name,\created_by_id, category_id FROM items_item
    sql_query_info      = SELECT * FROM `items_item` WHERE `id` = $id

    # ForeignKey's
    sql_attr_uint       = created_by_id
    sql_attr_uint       = category_id
}

index items_item
{
	type              = rt
	source            = items_item
	
	# List all fields
	rt_field          = name
	rt_attr_uint      = created_by_id
	rt_attr_uint      = category_id
	
    path              = /var/data/items_item
    docinfo           = extern
    morphology        = none
    stopwords         =
    min_word_len      = 2
    charset_type      = utf-8
    
    # "example" with min_prefix_len=3 -> "exa", "exam", "examp", "exampl"    
    min_prefix_len    = 0
    
    # "test" with min_infix_len=2 -> "te", "es", "st", "tes", "est" 
    min_infix_len     = 0
}

source reviews_feedback
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = aidanmysql
    sql_db              = cx
    sql_port            = 

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \ SELECT id, body,\item_id, created_by_id, is_positive from reviews_feedback
    sql_query_info      = SELECT * FROM `reviews_feedback` WHERE `id` = $id

    # ForeignKey's
    sql_attr_uint       = created_by_id
    sql_attr_uint       = is_positive
    sql_attr_uint       = item_id
}

index reviews_feedback
{
	type              = rt
	source            = reviews_feedback
	
	# List all fields
	rt_field          = body
	rt_attr_uint      = created_by_id
	rt_attr_uint      = is_positive
	rt_attr_uint      = item_id
	
    path              = /var/data/reviews_feedback
    docinfo           = extern
    morphology        = none
    stopwords         =
    min_word_len      = 2
    charset_type      = utf-8
    
    # "example" with min_prefix_len=3 -> "exa", "exam", "examp", "exampl"    
    min_prefix_len    = 0
    
    # "test" with min_infix_len=2 -> "te", "es", "st", "tes", "est" 
    min_infix_len     = 0
}

indexer
{
	# memory limit, in bytes, kilobytes (16384K) or megabytes (256M)
	# optional, default is 32M, max is 2047M, recommended is 256M to 1024M
	mem_limit			= 32M

	# maximum IO calls per second (for I/O throttling)
	# optional, default is 0 (unlimited)
	max_iops			= 60
}

searchd
{
	listen = localhost:3307:mysql41

	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	# log				= /usr/local/sphinx/log/searchd.log

	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	# query_log			= /usr/local/sphinx/log/query.log
	# query_log_format  = 'sphinxql'

	# client read timeout, seconds
	# optional, default is 5
	read_timeout		= 5

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file			= /usr/local/sphinx/log/searchd.pid

	# max amount of matches the daemon ever keeps in RAM, per-index
	# WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
	# default is 1000 (just like Google)
	max_matches			= 1000

	# seamless rotate, prevents rotate stalls if precaching huge datasets
	# optional, default is 1
	seamless_rotate		= 1

	# whether to forcibly preopen all indexes on startup
	# optional, default is 0 (do not preopen)
	preopen_indexes		= 0

	# whether to unlink .old index copies on succesful rotation.
	# optional, default is 1 (do unlink)
	unlink_old			= 1
	
	workers = threads
}
